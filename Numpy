# NumPy Course Outline

## 1. Introduction to NumPy
- What is NumPy?
- Why use NumPy?
- Installing NumPy

## 2. NumPy Arrays
- Creating arrays
- Array attributes
- Array indexing and slicing

Example:
```python
import numpy as np

# Create a 1D array
arr1d = np.array([1, 2, 3, 4, 5])
print("1D array:", arr1d)

# Create a 2D array
arr2d = np.array([[1, 2, 3], [4, 5, 6]])
print("2D array:\n", arr2d)

# Array attributes
print("Shape:", arr2d.shape)
print("Dimensions:", arr2d.ndim)
print("Data type:", arr2d.dtype)

# Indexing and slicing
print("First row:", arr2d[0])
print("Element at (1,2):", arr2d[1, 2])
print("Sliced array:\n", arr2d[:, 1:])
```

## 3. Array Operations
- Element-wise operations
- Broadcasting
- Universal functions (ufuncs)

Example:
```python
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

# Element-wise operations
print("Addition:", a + b)
print("Multiplication:", a * b)

# Broadcasting
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([1, 2, 3])
print("Broadcasting result:\n", c + d)

# Universal functions
print("Exponential:", np.exp(a))
print("Square root:", np.sqrt(a))
```

## 4. Array Manipulation
- Reshaping arrays
- Stacking and splitting arrays
- Transposing arrays

Example:
```python
import numpy as np

arr = np.arange(12)

# Reshaping
reshaped = arr.reshape(3, 4)
print("Reshaped array:\n", reshaped)

# Stacking
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
stacked_v = np.vstack((a, b))
stacked_h = np.hstack((a, b))
print("Vertical stack:\n", stacked_v)
print("Horizontal stack:", stacked_h)

# Transposing
transposed = reshaped.T
print("Transposed array:\n", transposed)
```

## 5. Linear Algebra with NumPy
- Matrix operations
- Eigenvalues and eigenvectors
- Solving linear equations

Example:
```python
import numpy as np

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Matrix multiplication
C = np.dot(A, B)
print("Matrix multiplication:\n", C)

# Eigenvalues and eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(A)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:\n", eigenvectors)

# Solving linear equations: Ax = b
b = np.array([1, 2])
x = np.linalg.solve(A, b)
print("Solution to Ax = b:", x)
```

## 6. Statistical Functions
- Basic statistics (mean, median, std)
- Correlations and covariance
- Histograms and binning

Example:
```python
import numpy as np

data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print("Mean:", np.mean(data))
print("Median:", np.median(data))
print("Standard deviation:", np.std(data))

# Correlation coefficient
x = np.array([1, 2, 3, 4, 5])
y = np.array([2, 4, 5, 4, 5])
correlation = np.corrcoef(x, y)
print("Correlation coefficient:\n", correlation)

# Histogram
hist, bins = np.histogram(data, bins=5)
print("Histogram:", hist)
print("Bin edges:", bins)
```

## 7. File I/O with NumPy
- Saving and loading NumPy arrays
- Working with CSV files

Example:
```python
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

# Save array to file
np.save('my_array.npy', arr)

# Load array from file
loaded_arr = np.load('my_array.npy')
print("Loaded array:\n", loaded_arr)

# Save as CSV
np.savetxt('my_array.csv', arr, delimiter=',')

# Load from CSV
csv_loaded = np.loadtxt('my_array.csv', delimiter=',')
print("Loaded from CSV:\n", csv_loaded)
```

## 8. Advanced Topics
- Masked arrays
- Structured arrays
- Vectorization and performance optimization

Example:
```python
import numpy as np

# Masked arrays
data = np.array([1, 2, -999, 4, 5])
masked_data = np.ma.masked_equal(data, -999)
print("Masked array:", masked_data)
print("Mean (ignoring masked values):", np.ma.mean(masked_data))

# Structured arrays
dtype = [('name', 'U10'), ('age', 'i4'), ('weight', 'f4')]
values = [('Alice', 25, 55.0), ('Bob', 30, 70.5), ('Charlie', 35, 65.0)]
structured_arr = np.array(values, dtype=dtype)
print("Structured array:\n", structured_arr)


print("Names:", structured_arr['name'])

# Vectorization example
def slow_function(x):
    return x**2 + 2*x + 1

vectorized_function = np.vectorize(slow_function)
x = np.array([1, 2, 3, 4, 5])
print("Vectorized result:", vectorized_function(x))
```

This course outline covers the fundamental concepts of NumPy along with practical examples. It provides a solid foundation for using NumPy in data analysis, scientific computing, and machine learning tasks.

..........................................................
1. Introduction to NumPy
NumPy stands for Numerical Python, and it is a core library for scientific and numerical computing in Python.
It provides support for arrays and matrices, along with a large collection of mathematical functions to operate on these arrays.

import numpy as np

# Create an array
arr = np.array([1, 2, 3, 4, 5])
print(arr)

2. Array Creation and Basic Operations
Creating arrays:
1D, 2D, and n-dimensional arrays

# 1D Array
arr1 = np.array([1, 2, 3])

# 2D Array (Matrix)
arr2 = np.array([[1, 2, 3], [4, 5, 6]])

# 3D Array
arr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

print(arr1, arr2, arr3)

Array operations:
Arithmetic operations are element-wise.
a = np.array([10, 20, 30])
b = np.array([1, 2, 3])

# Add arrays
result = a + b

# Subtract arrays
result = a - b

# Multiply arrays
result = a * b

# Divide arrays
result = a / b

3. Array Indexing and Slicing
arr = np.array([10, 20, 30, 40, 50])

# Access elements
print(arr[0])  # 10
print(arr[1:4])  # [20 30 40]

arr2 = np.array([[1, 2, 3], [4, 5, 6]])

# Access specific elements
print(arr2[1, 2])  # 6

# Slice rows and columns
print(arr2[:, 1])  # Second column [2, 5]

4. Array Shape, Reshape, and Size
arr = np.array([[1, 2], [3, 4], [5, 6]])

# Shape (rows, columns)
print(arr.shape)

# Total number of elements
print(arr.size)

# Number of dimensions
print(arr.ndim)

Reshaping arrays:
arr = np.array([1, 2, 3, 4, 5, 6])

# Reshape to 2x3 matrix
arr_reshaped = arr.reshape(2, 3)
print(arr_reshaped)

5. Broadcasting and Vectorized Operations
Broadcasting allows arithmetic operations between arrays of different shapes.
a = np.array([1, 2, 3])
b = np.array([[10], [20], [30]])

# Broadcasting (3x3 matrix resulting from element-wise multiplication)
result = a * b
print(result)

6. Universal Functions (ufuncs)
NumPy provides a variety of ufuncs (universal functions) for element-wise operations:
arr = np.array([1, 2, 3, 4])

# Trigonometric functions
print(np.sin(arr))

# Exponent and logarithms
print(np.exp(arr))
print(np.log(arr))

# Sum, min, max
print(np.sum(arr))
print(np.min(arr))
print(np.max(arr))

7. Random Module in NumPy
Random number generation:
# Generate an array of random numbers
rand_arr = np.random.rand(3, 3)
print(rand_arr)

# Random integers
rand_int = np.random.randint(1, 10, size=(3, 3))
print(rand_int)

8. Statistical Functions
Basic statistics:
arr = np.array([1, 2, 3, 4, 5])

# Mean
print(np.mean(arr))

# Standard deviation
print(np.std(arr))

# Variance
print(np.var(arr))

# Median
print(np.median(arr))

9. Linear Algebra with NumPy
Matrix multiplication and linear algebra operations:
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Matrix multiplication
C = np.dot(A, B)
print(C)

# Matrix determinant
det = np.linalg.det(A)
print(det)

# Inverse of a matrix
inv_A = np.linalg.inv(A)
print(inv_A)

10. Saving and Loading NumPy Arrays
Saving and loading arrays to/from files:

arr = np.array([1, 2, 3, 4, 5])

# Save array to a file
np.save('my_array.npy', arr)

# Load array from a file
loaded_arr = np.load('my_array.npy')
print(loaded_arr)

.............................................................

Arrays: NumPyâ€™s core is its powerful array object. Create arrays with np.array() and perform operations like addition or multiplication.
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = a + b  # Results in array([5, 7, 9])

Array Indexing and Slicing: Access elements or a range of elements in an array. Useful for manipulating subsets of your data.
arr = np.array([10, 20, 30, 40, 50])
print(arr[1:4])  # Prints array([20, 30, 40])

Array Operations: Perform element-wise operations, aggregate functions, and broadcasting.
d = a * 2  # Results in array([2, 4, 6])
total = np.sum(a)  # Results in 6

Shape Manipulation: Reshape, flatten, or transpose arrays.
matrix = np.array([[1, 2, 3], [4, 5, 6]])
reshaped = matrix.reshape((3, 2))  # Changes shape to (3, 2)

Statistical Operations: Compute mean, median, standard deviation, etc.
mean_value = np.mean(matrix)  # Results in 3.5
std_dev = np.std(matrix)  # Results in ~1.7078

Random Numbers: Generate random numbers for simulations or initializing data.
random_numbers = np.random.rand(3, 3)  # Creates 3x3 array with random values

